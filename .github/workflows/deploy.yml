name: Deploy Sysrai Platform

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET_KEY: test-secret-key
      run: |
        pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Production Server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          echo "üöÄ Starting deployment..."
          
          # Navigate to app directory
          cd /var/www/sysrai
          
          # Stop the service
          sudo systemctl stop sysrai
          
          # Backup current version
          cp -r . ../sysrai-backup-$(date +%Y%m%d_%H%M%S)
          
          # Pull latest changes
          git fetch origin
          git reset --hard origin/main
          
          # Activate virtual environment
          source venv/bin/activate
          
          # Install/update dependencies
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Run database migrations
          alembic upgrade head
          
          # Restart services
          sudo systemctl start sysrai
          sudo systemctl reload nginx
          
          # Wait for service to start
          sleep 10
          
          # Health check
          if curl -f http://localhost:8000/health; then
            echo "‚úÖ Deployment successful!"
            echo "üåê Service is running at http://localhost:8000"
          else
            echo "‚ùå Deployment failed - service health check failed"
            echo "üîÑ Rolling back..."
            sudo systemctl stop sysrai
            cd ../sysrai-backup-$(date +%Y%m%d_%H%M%S)
            cp -r . /var/www/sysrai/
            cd /var/www/sysrai
            sudo systemctl start sysrai
            exit 1
          fi
    
    - name: Notify Deployment Status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          üöÄ Sysrai Platform Deployment ${{ job.status }}
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          ${{ job.status == 'success' && '‚úÖ Successfully deployed to production!' || '‚ùå Deployment failed!' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-runpod:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Update RunPod SkyReels Server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.RUNPOD_HOST }}
        username: root
        key: ${{ secrets.RUNPOD_SSH_KEY }}
        port: 22
        script: |
          echo "üé¨ Updating SkyReels API Server..."
          
          cd /workspace
          
          # Download latest server script
          wget -O skyreels_server.py https://raw.githubusercontent.com/ashnehmet/Sysrai-platform/main/skyreels_server.py
          
          # Restart API server if running
          pkill -f "python3 skyreels_server.py" || true
          sleep 5
          
          # Start API server in background
          nohup python3 skyreels_server.py > api.log 2>&1 &
          
          # Wait and check health
          sleep 15
          if curl -f http://localhost:8000/health; then
            echo "‚úÖ RunPod SkyReels API updated successfully!"
          else
            echo "‚ö†Ô∏è RunPod API may need manual restart"
          fi